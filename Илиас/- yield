- yield
- join
1. Написать программу, в которой будем собирать автомобиль: двигатель готов, кузов готов, колеса готовы, автомобиль собран

2. Написать программу, которая в двух потоках вычисляет максимумы в двух массивах, после чего в мейне определяется, чей максимум больше

3. Написать программу с тремя потоками.
В одном потоке происходит заполнение массива, второй поток ждет заполнения и после этого считает сумму элементов в массиве. В это время, пока эти два потока работают, в главном потоке выводится меню с пунктами:
1. Попить чай
2. Попить кофе
3. Выход
Причем, в главном потоке, после подсчета суммы (при условии, что меню уже завершилось) нужно вывести элементы заполненного массива на консоль. Если сумма подсчиталась, а меню еще работает, то сначала нужно выйти из меню.

- синхронизация
4. два потока увеличивают переменную в общем объекте без синхронизации
5. Программа делает запись в файл и добавление новых значений через один список. Сделать сначала без синхронизации, потом через синхронизацию.
Сделать через лямбда выражения.

консольное меню:
1. Запись списка в файл
2. Добавление элемента в файл
3. Показать список
4. Выход

6. Сделать заполнение массива и поиск его суммы в разных потоках. Синхронизировать доступ к массиву

7. Есть денежный счет, на который могут поступать денеждные средства одновременно из различных источников, а также списываться. Нужно сделать так, чтобы все операции были корректно выполенены, чтобы они не потерялись или не перезаписали друг друга.

8. В директории лежат входные текстовые файлы, проименованные следующим образом: in_<N>.dat, где N - натуральное число. Каждый файл состоит из двух строк. В первой строке - число, обозначающее действие, а во второй - числа с плавающей точкой, разделенные пробелом.
Действия могут быть следующими:
1 - сложение
2 - умножение
3 - сумма квадратов
Необходимо написать многопоточное приложение, которое выполнит требуемые действия над числами и сумму результатов запишет в файл out.dat. Название рабочей директории передается в виде аргумента рабочей строки. В реализации приветствуется использование полиморфизма и паттернов проектирования.



##########################3
- volatile
1. При изменении значения переменной в одном потоке, выводить ее новое значение в другом потоке	
- атомарные операции
2. Создать 1000 потоков, каждый из которых увеличивает значение переменной на 1
- синхронизированные коллекции
3. Есть склад товаров, его разгружают несколько машин и доставляет тоже несколько. Нужно написать приложение
4. Про корабли. Есть множество кораблей, через туннель может проходить только 5. Есть три причала, на которых корабли загружаются и отправляются обратно. Потом, разгружаются
- callable
На складе есть N товаров. 5 потоков одновременно могут забирать товары со склада. Нужно вывести список товаров, которые забрали со склада
Считать 5 файлов в отдельных потоках и сформировать единый список из строк
-executor service
Пропустить корабли через канал в порту (изначально есть много кораблей, канал вмещает не более 3-х кораблей)
-newFixedThreadPool
-newCachedThreadPool
Нужно построить здание как можно быстрее, количество экскаваторо не ограничено

