- это пройденная тема
- это не пройденная
тест

Темы: 
- Введение в программирование
- Арифметические операции
- Ввод с консоли
- Условия
	- if
	- if, else
	- if, else if, else
	- логическое И
	- логическое ИЛИ
	- switch
- Циклы
	- while
	- for
	- do while
	- консольное меню
	- поиск максимума
	- поиск минимума
	- поиск суммы
- Генерация случайных чисел
	- Random
	- Math.random
- Массивы
	- создание одномерного массива
	- заполнение одномерного массива вручную
	- заполнение одномерного массива в цикле
	- поиск максимума, минимума, суммы
	- поиск индекса элемента, содержащего максимум, минимум, сумму
	- обмен элементов массива местами
	- копирование элементов массива в другой массив
	- консольное меню
	- двумерные массивы
- Введение в ООП
	- обертка параметров объекта в класс
	- создание и заполнение массива объектов вручную
	- заполнение массива объектов в цикле
	- заполнение одномерного массива объектами классов в цикле и поиск максимума или минимума или суммы
	- выполнение тех же действий с массивами, что в графе массивы, только в виде элементов теперь объекты
- Методы классов
	- методы без возращаемого значения и параметров на примере калькулятора
	- методы с параметрами на примере калькулятора
	- методы с параметрами и с возвращаемым значением на примере калькулятора
	- вызов методов своего же класса из другого метода
	- выполнение тех же задач с массивами, что и в главе ООП, только с использованием методов
	- метод init для перехода на конструкторы
- Конструкторы
	- создание конструкторов без параметров
	- создание конструкторов с параметрами
	- выполнение задач на конструкторы на основе тех же задач, что и из главы введения в ООП и дополнительных новых
	- перегрузка конструкторов
	- вызов перегруженного конструктора из другого конструктора
	- перегрузка методов
	- вызов перегруженного метода из другого метода
	- выполнение задач на перегрузку конструкторов и методов
- Объекты, вложенные в другие объекты
	- создание класса с инкапсулированным массивом и методами работы с ним
	- создание библиотеки с книгами и страницами
	- сравнение объектов друг с другом для подготовки к методу equals
	- выполнение подобных примером
- Модификатор static
	- статические поля
	- статические методы
	- статические блоки
	- экземплярные блоки
	- выполнение задач на статику
- Модификатор final 1
	- использование с переменными
- Модификаторы доступа 1
	- public
	- private
	- геттеры и сеттеры
	- выполнение примеров из главы вложенных объектов, но с модификатором private
- Наследование 1
	- создание примера с наследованием полей и общих методов
	- ссылочные типы данных
	- метод equals
	- метод toString
	- выполнение задач на методы equals и toString для подготовки к списку ArrayList и его методов, которые используют equals и contains
- Список ArrayList
	- введение в список
	- разбор методов add, get, size, contains, indexOf, remove
	- выполнение задач из графы с массивами, только со списками
	- создание своего списка MyArrayList
- Рекурсия
	- введение на основе сравнения рекурсии и цикла
	- выполнение задач на рекурсию, в которых используются как методы с возвращаемым значением, так и без
- Наследование 2. Продолжение
	- использование конструкторов суперкласса
	- вызов родительских конструкторов
	- переопределение методов
	- вызов родительских методов
	- выполнение задач на использование переопределенных методов
- Модификатор final 2. Продолжение
	- использование с классами и влияние на наследование
- Enum	
- Полиморфизм
	- введение в полиморфизм
	- приведение типов: расширяющее и сужающее
	- instanse of
	- getClass
	- разница между instance of и getClass
	- получение значений полей дочернего класса через методы суперкласса
	- выполнение задач на полиморфизм
	- выполнение задач, где у родителя остаются незаполненные методы, чтобы подвести ученика к необходимости использования абстрактных классов
- Абстрактные классы
	- введение в абстрактные классы
	- выполнение задач на них
- Интерфейсы
	- введение в интерфейсы
	- deafult методы
	- выполнение задач на них
	- наследование интерфейсов
	- переключение между типами интерфейсов в рамках одного объекта
	- переключение между интерфейсами и суперклассами с применением полиморфизма
- Исключения
	- введение в исключения
	- checked исключения
	- unchecked исключения
	- оператор throw
	- оператор throws
	- написание своих исключений
- Работа со строками
	- split
	- trim
	- извлечение подстроки
- Файлы
	- запись в файл через PrintWriter 
	- чтение из файла через Scanner
	- сохранение данных в файл
	- выполнение задач с использованим консольного меню и сохранением данных
- Пакеты
	- введение в правильную структуру приложения	
- Модификаторы доступа 2. Продолжение
	- модификатор default
- Логирование
	- логирование в консоль
	- логирование в файл
- Интерфейс Comparable
	- введение в интерфейс Comparable
	- выполнение задач
	- интерфейс Comparator
	- реализация интерфейсов Comparable и Comparator в своем классе
	- выполнение задач
- Интерфейс Iterable
	- введение в интерфейс Iterable
	- интерфейс Iterator
	- знакомство с интерфейсами на примере готовых коллекций
	- удаление элемента из коллекций в цикле
	- реализация интерфейсов Iterable и Iterator в своем классе
	- выполнение задач
- Типы классов
	- Внутренние (Inner/экземплряные)
		- локальные inner классы (local classes)
		- внутренние классы-члены (member inner classes)
	- Вложенные (nested/статические) классы
- Generics (дженерики) 1
	- параметизированные классы
	- создание своего списка MyArrayList в виде дженерика
	- создание своего дженерика с несколькими параметизированными типами
- Структуры данных, Коллекции, Карты
	- введение в иерархию коллекций и карт, вспомнить создаваемый ранее свой MyArrayList
	- знакомство с очередями на примере классов ArrayDequeue, PriorityQueue
	- создание своей очереди
	- знакомство со стэком на примере класса Stack
	- создание своего стэка
	- знакомство с двусвязным список на примере класса LinkedList
	- создание односвязного списка
	- создание двусвязного списка
	- знакомство с хэш таблицей на примере класса HashSet
	- создание своей хэш таблицы
	- создание бинарного дерева
		- обход дерева в ширину
		- обход дерева в глубину
		- бинарный поиск
	- знакомство с классом HashMap
	- создание своего класса HashMap
	- знакомсвто с классом TreeMap
	- создание своего класса TreeMap
	- знакомство с классом LinkedHashMap
	- завершение знакомства с классом HashSet
	- знакомство с классом TreeSet
	- знакомство с классом LinkedHashSet
- Система контроля версий Git
	- создание локального репозитория
	- добавление удаленного репозитория
	- коммит файлов
	- создание новой ветки
	- объединение веток
	- обработка конфликтов
- Отношения классов в коллекциях
	- инвариантность
	- ковариантность
	- контрвариантность
	- выполнение задач на эту тему для подготовки к wildcard-ам
- Generics 2. Продолжение
	- параметизированные методы
	- wildcards
	- выполнение задач на ковариантность и контрвариантность с применением wildcards	
- Рефлексия
	- введение в рефлексию
	- создание объектов класса на основе их класса
	- получение доступа к private полям
	- создание объектов, используя конструктор класса
	- создание объектов, используя сеттеры
	- поиск классов через classLoader и создание их объектов (через переопределение своего ClassLoader)
- Аннотации
	- введение в аннотации на примере @Override
	- написание своих аннотаций	
- Maven
	- введение в Maven
	- создание проекта типа Maven
- Библиотека Lombock
	- создание конструкторов, геттеров, сеттеров, equals, toString через lombock
	- аннотация @Data	
- Потоки ввода вывода (input/output)
	- символьные потоки
		- PrintWriter
		- FileWriter
		- FileReader
		- BufferedWriter
		- BufferedReader
	- байтовые потоки
		- FileInputStream
		- FileOutputStream
		- BufferedInputStream
		- BufferedOutputStream
		- введение про System.in, System.out и System.err
- Сериализация
	- введение в сериализацию
	- ObjectOutputStream
	- ObjectInputStream
	- serialVersionUID	
	- transient
- JUnit тесты
- Тесты Mochito
- nio2
	- отличие nio от nio2
	- чтение
	- запись
- Класс java.util.Date
	- Конвертация даты в строку
	- Конвертация строки в дату
	- выполнение заданий на чтение/запись даты в файл через nio2
- Пакет java.time (Java 8 Date)
	- выполнение заданий на работу с датой
- Регулярные выражения
- Анонимные классы
	- введение в анонимные классы на примере их создания на основе интерфейсов, абстрактных и обычных классов
- Лямбда выражения
	- функциональные интерфейсы
	- глобальные переменные в лямбда выражениях
- Ссылки на методы
- Stream (Java 8)	
	- Введение в потоки
	- Выполнение задач на foreach, filter, collect, sum
	- max, min, average (подготовка к введению в Optional)
	- map
	- flatMap
	- выполнение задач на map, flatMap
- Optional (Java 8)
	- ofNullable
	- of
	- ifPresent
	- elseIf
- Алгоритмы
	- сложность алгоритмов
	- бинарный поиск
	- сортировка пузырьком
	- сортировка выбором
	- быстрая сортировка
- Многопоточность
	- класс Thread
	- интерфейс Runnable
	- выполнение задач на Thread и Runnable
	- sleep, yeild
	- синхронизация через блок synchronized()
	- разница в синхронизации между Thread и Runnable при нескольких потока (Runnable - общий объект, а Thread - отдельные)
	- volatile на примере, когда один поток увеличивает переменную, а другой следит за ее изменением
	- синхронизация методов
	- демонстрация, на основе какого объекта выполняется синхронизация через методы
	- демонстрация отсутствия синхронизации на основе методов в разных объектах
	- выполнение задач на синхронизацию методов
	- интерфейс Callable
	- класс FutureTask
	- выполнение задач на Callable и FutureTask
	- выполнение задач, где количество потоков фиксированно и поддерживается на одном уровне для подготовки к executor-ам (например, три мастера чинят телевизоры и следующий телевизор начинает чиниться только тогда, когда один из мастеров освобождается)
	- executors (single, fixed, cached)
	- выполнение задач на executors
	- интерфейс Future
	- синхронизированные коллекции, AtomicInteger, ReentrantLock
	- выполнение задач
	- ситуация deadlock
	- ситуация гонки потоков
	- может быть семафоры и проч
- Паттерны проектирования
	- Singleton
	- FactoryMethod
	- Factory
	- Prototype
	- Iterator
	- Bridge
	- и проч
- Базы данных
	- настройка и подключение в проекте
	- основные типы запросов: select, insert, update, delete
	- связь таблиц: один к одному, один ко многим, многие ко многим
- Модули в проекте
	- разбивка проекта на модули api, model, impl и service (объединяет model и impl модули)
	- создание родительского pom файла (dependency management)	
- Persistance (каждый проект создается в отдельном модуля с выносом общих библиотек в родительский pom и общих файлов по модулям)
	- введение в persistance
	- ORM framework hibernate 
		- настройка через xml
		- настройка через properties
		- решение задач
		- связь сущностей: один к одному, один ко многим, многие ко многим
	- JPA
		- настройка через xml
		- настройка через properties
		- решение задач	
- Сервлеты
	- введение в сервлеты
	- настройка проекта через аннотации
	- создание простого сервлета
- Spring
	- настрока spring
	- демонстранция на примере создания простого бина без оператора new
	- IoC (inversion of control)	
	- DI (dependency injection)
	- аспектно-ориентированное программирование
	- создание простого spring проекта (аннотации PathVariable, ModelAttribute, Get/PostMapping)
	- Spring Data (репозитории, query methods)
	- настройка подключения к базе данных
	- создание простого проекта с использованием JPA
	- REST контроллеры
	- создание простого REST проекта


liquibase?
задача на списание денег с банковского счета на геттеры и сеттеры


